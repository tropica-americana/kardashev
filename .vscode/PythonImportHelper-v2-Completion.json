[
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "version_info",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils  ",
        "description": "utils  ",
        "isExtraImport": true,
        "detail": "utils  ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils  ",
        "description": "utils  ",
        "isExtraImport": true,
        "detail": "utils  ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils  ",
        "description": "utils  ",
        "isExtraImport": true,
        "detail": "utils  ",
        "documentation": {}
    },
    {
        "label": "string,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string.",
        "description": "string.",
        "detail": "string.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "content",
        "description": "content",
        "isExtraImport": true,
        "detail": "content",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "content",
        "description": "content",
        "isExtraImport": true,
        "detail": "content",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "content",
        "description": "content",
        "isExtraImport": true,
        "detail": "content",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "sources  ",
        "description": "sources  ",
        "isExtraImport": true,
        "detail": "sources  ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "content  ",
        "description": "content  ",
        "isExtraImport": true,
        "detail": "content  ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "utils    ",
        "description": "utils    ",
        "isExtraImport": true,
        "detail": "utils    ",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "formatter",
        "description": "formatter",
        "isExtraImport": true,
        "detail": "formatter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "formatter",
        "description": "formatter",
        "isExtraImport": true,
        "detail": "formatter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tohtml   ",
        "description": "tohtml   ",
        "isExtraImport": true,
        "detail": "tohtml   ",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "utils",
        "description": "utils",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "fileinput,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fileinput.",
        "description": "fileinput.",
        "detail": "fileinput.",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "WebPGetDecoderVersion",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPGetDecoderVersion():\n  \"\"\"WebPGetDecoderVersion() -> int\"\"\"\n  return _libwebp.WebPGetDecoderVersion()\ndef WebPGetInfo(*args):\n  \"\"\"WebPGetInfo(uint8_t data) -> (width, height)\"\"\"\n  return _libwebp.WebPGetInfo(*args)\ndef WebPDecodeRGB(*args):\n  \"\"\"WebPDecodeRGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGB(*args)\ndef WebPDecodeRGBA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPGetInfo",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPGetInfo(*args):\n  \"\"\"WebPGetInfo(uint8_t data) -> (width, height)\"\"\"\n  return _libwebp.WebPGetInfo(*args)\ndef WebPDecodeRGB(*args):\n  \"\"\"WebPDecodeRGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGB(*args)\ndef WebPDecodeRGBA(*args):\n  \"\"\"WebPDecodeRGBA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGBA(*args)\ndef WebPDecodeARGB(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPDecodeRGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPDecodeRGB(*args):\n  \"\"\"WebPDecodeRGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGB(*args)\ndef WebPDecodeRGBA(*args):\n  \"\"\"WebPDecodeRGBA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGBA(*args)\ndef WebPDecodeARGB(*args):\n  \"\"\"WebPDecodeARGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeARGB(*args)\ndef WebPDecodeBGR(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPDecodeRGBA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPDecodeRGBA(*args):\n  \"\"\"WebPDecodeRGBA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeRGBA(*args)\ndef WebPDecodeARGB(*args):\n  \"\"\"WebPDecodeARGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeARGB(*args)\ndef WebPDecodeBGR(*args):\n  \"\"\"WebPDecodeBGR(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGR(*args)\ndef WebPDecodeBGRA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPDecodeARGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPDecodeARGB(*args):\n  \"\"\"WebPDecodeARGB(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeARGB(*args)\ndef WebPDecodeBGR(*args):\n  \"\"\"WebPDecodeBGR(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGR(*args)\ndef WebPDecodeBGRA(*args):\n  \"\"\"WebPDecodeBGRA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGRA(*args)\ndef WebPGetEncoderVersion():",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPDecodeBGR",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPDecodeBGR(*args):\n  \"\"\"WebPDecodeBGR(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGR(*args)\ndef WebPDecodeBGRA(*args):\n  \"\"\"WebPDecodeBGRA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGRA(*args)\ndef WebPGetEncoderVersion():\n  \"\"\"WebPGetEncoderVersion() -> int\"\"\"\n  return _libwebp.WebPGetEncoderVersion()\ndef wrap_WebPEncodeRGB(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPDecodeBGRA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPDecodeBGRA(*args):\n  \"\"\"WebPDecodeBGRA(uint8_t data) -> (rgb, width, height)\"\"\"\n  return _libwebp.WebPDecodeBGRA(*args)\ndef WebPGetEncoderVersion():\n  \"\"\"WebPGetEncoderVersion() -> int\"\"\"\n  return _libwebp.WebPGetEncoderVersion()\ndef wrap_WebPEncodeRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGB(*args)\ndef wrap_WebPEncodeBGR(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPGetEncoderVersion",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPGetEncoderVersion():\n  \"\"\"WebPGetEncoderVersion() -> int\"\"\"\n  return _libwebp.WebPGetEncoderVersion()\ndef wrap_WebPEncodeRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGB(*args)\ndef wrap_WebPEncodeBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGR(*args)\ndef wrap_WebPEncodeRGBA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeRGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGB(*args)\ndef wrap_WebPEncodeBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGR(*args)\ndef wrap_WebPEncodeRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGBA(*args)\ndef wrap_WebPEncodeBGRA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeBGR",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGR(*args)\ndef wrap_WebPEncodeRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGBA(*args)\ndef wrap_WebPEncodeBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGRA(*args)\ndef wrap_WebPEncodeLosslessRGB(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeRGBA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeRGBA(*args)\ndef wrap_WebPEncodeBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGRA(*args)\ndef wrap_WebPEncodeLosslessRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGB(*args)\ndef wrap_WebPEncodeLosslessBGR(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeBGRA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeBGRA(*args)\ndef wrap_WebPEncodeLosslessRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGB(*args)\ndef wrap_WebPEncodeLosslessBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGR(*args)\ndef wrap_WebPEncodeLosslessRGBA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeLosslessRGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeLosslessRGB(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGB(*args)\ndef wrap_WebPEncodeLosslessBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGR(*args)\ndef wrap_WebPEncodeLosslessRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGBA(*args)\ndef wrap_WebPEncodeLosslessBGRA(*args):",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeLosslessBGR",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeLosslessBGR(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGR(*args)\ndef wrap_WebPEncodeLosslessRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGBA(*args)\ndef wrap_WebPEncodeLosslessBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGRA(*args)\n_UNUSED = 1",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeLosslessRGBA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeLosslessRGBA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessRGBA(*args)\ndef wrap_WebPEncodeLosslessBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGRA(*args)\n_UNUSED = 1\ndef WebPEncodeRGB(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGB(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGB(",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "wrap_WebPEncodeLosslessBGRA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def wrap_WebPEncodeLosslessBGRA(*args):\n  \"\"\"private, do not call directly.\"\"\"\n  return _libwebp.wrap_WebPEncodeLosslessBGRA(*args)\n_UNUSED = 1\ndef WebPEncodeRGB(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGB(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGB(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeRGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeRGB(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGB(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGB(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeRGBA(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGBA(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGBA(",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeRGBA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeRGBA(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGBA(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGBA(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeBGR(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeBGR(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeBGR(",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeBGR",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeBGR(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeBGR(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeBGR(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeBGRA(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeBGRA(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeBGRA(",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeBGRA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeBGRA(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeBGRA(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeBGRA(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeLosslessRGB(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessRGB(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessRGB(rgb, _UNUSED, _UNUSED, width, height, stride)",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeLosslessRGB",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeLosslessRGB(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessRGB(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessRGB(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeLosslessRGBA(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessRGBA(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessRGBA(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeLosslessRGBA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeLosslessRGBA(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessRGBA(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessRGBA(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeLosslessBGR(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessBGR(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessBGR(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeLosslessBGR",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeLosslessBGR(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessBGR(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessBGR(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeLosslessBGRA(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessBGRA(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessBGRA(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "WebPEncodeLosslessBGRA",
        "kind": 2,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "def WebPEncodeLosslessBGRA(rgb, width, height, stride):\n  \"\"\"WebPEncodeLosslessBGRA(uint8_t rgb, int width, int height, int stride) -> lossless_webp\"\"\"\n  webp = wrap_WebPEncodeLosslessBGRA(rgb, _UNUSED, _UNUSED, width, height, stride)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\n# This file is compatible with both classic and new-style classes.",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "_UNUSED",
        "kind": 5,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "peekOfCode": "_UNUSED = 1\ndef WebPEncodeRGB(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGB(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"\n  webp = wrap_WebPEncodeRGB(\n      rgb, _UNUSED, _UNUSED, width, height, stride, quality_factor)\n  if len(webp[0]) == 0:\n    return None\n  return webp[0]\ndef WebPEncodeRGBA(rgb, width, height, stride, quality_factor):\n  \"\"\"WebPEncodeRGBA(uint8_t rgb, int width, int height, int stride, float quality_factor) -> lossy_webp\"\"\"",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.libwebp",
        "documentation": {}
    },
    {
        "label": "tmpdir",
        "kind": 5,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "peekOfCode": "tmpdir = tempfile.mkdtemp()\npackage = \"com.google.webp\"\npackage_path = os.path.join(tmpdir, *package.split(\".\"))\nos.makedirs(package_path)\n# Create __init_.py files along the package path.\ninitpy_path = tmpdir\nfor d in package.split(\".\"):\n  initpy_path = os.path.join(initpy_path, d)\n  open(os.path.join(initpy_path, \"__init__.py\"), \"w\").close()\nshutil.copy2(\"libwebp.py\", package_path)",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "documentation": {}
    },
    {
        "label": "package",
        "kind": 5,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "peekOfCode": "package = \"com.google.webp\"\npackage_path = os.path.join(tmpdir, *package.split(\".\"))\nos.makedirs(package_path)\n# Create __init_.py files along the package path.\ninitpy_path = tmpdir\nfor d in package.split(\".\"):\n  initpy_path = os.path.join(initpy_path, d)\n  open(os.path.join(initpy_path, \"__init__.py\"), \"w\").close()\nshutil.copy2(\"libwebp.py\", package_path)\nsetup(name=\"libwebp\",",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "documentation": {}
    },
    {
        "label": "package_path",
        "kind": 5,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "peekOfCode": "package_path = os.path.join(tmpdir, *package.split(\".\"))\nos.makedirs(package_path)\n# Create __init_.py files along the package path.\ninitpy_path = tmpdir\nfor d in package.split(\".\"):\n  initpy_path = os.path.join(initpy_path, d)\n  open(os.path.join(initpy_path, \"__init__.py\"), \"w\").close()\nshutil.copy2(\"libwebp.py\", package_path)\nsetup(name=\"libwebp\",\n      version=\"0.0\",",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "documentation": {}
    },
    {
        "label": "initpy_path",
        "kind": 5,
        "importPath": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "description": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "peekOfCode": "initpy_path = tmpdir\nfor d in package.split(\".\"):\n  initpy_path = os.path.join(initpy_path, d)\n  open(os.path.join(initpy_path, \"__init__.py\"), \"w\").close()\nshutil.copy2(\"libwebp.py\", package_path)\nsetup(name=\"libwebp\",\n      version=\"0.0\",\n      description=\"libwebp python wrapper\",\n      long_description=\"Provides access to 'simple' libwebp decode interface\",\n      license=\"BSD\",",
        "detail": "SDL2_image-2.0.5.external.libwebp-1.0.2.swig.setup",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocCode:\n    def  __init__( self, margin, lines ):\n        self.lines = []\n        self.words = None\n        # remove margin spaces\n        for l in lines:\n            if string.strip( l[:margin] ) == \"\":\n                l = l[margin:]\n            self.lines.append( l )\n    def  dump( self, prefix = \"\", width = 60 ):"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocCode:\n    def  __init__( self, margin, lines ):\n        self.lines = []\n        self.words = None\n        # remove margin spaces\n        for l in lines:\n            if string.strip( l[:margin] ) == \"\":\n                l = l[margin:]\n            self.lines.append( l )\n    def  dump( self, prefix = \"\", width = 60 ):",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocPara:\n    def  __init__( self, lines ):\n        self.lines = None\n        self.words = []\n        for l in lines:\n            l = string.strip( l )\n            self.words.extend( string.split( l ) )\n    def  dump( self, prefix = \"\", width = 60 ):\n        lines = self.dump_lines( 0, width )\n        for l in lines:"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocPara:\n    def  __init__( self, lines ):\n        self.lines = None\n        self.words = []\n        for l in lines:\n            l = string.strip( l )\n            self.words.extend( string.split( l ) )\n    def  dump( self, prefix = \"\", width = 60 ):\n        lines = self.dump_lines( 0, width )\n        for l in lines:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocField:\n    def  __init__( self, name, lines ):\n        self.name  = name  # can be `None' for normal paragraphs/sources\n        self.items = []    # list of items\n        mode_none  = 0     # start parsing mode\n        mode_code  = 1     # parsing code sequences\n        mode_para  = 3     # parsing normal paragraph\n        margin     = -1    # current code sequence indentation\n        cur_lines  = []\n        # analyze the markup lines to check whether they contain paragraphs,"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocField:\n    def  __init__( self, name, lines ):\n        self.name  = name  # can be `None' for normal paragraphs/sources\n        self.items = []    # list of items\n        mode_none  = 0     # start parsing mode\n        mode_code  = 1     # parsing code sequences\n        mode_para  = 3     # parsing normal paragraph\n        margin     = -1    # current code sequence indentation\n        cur_lines  = []\n        # analyze the markup lines to check whether they contain paragraphs,",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocMarkup:\n    def  __init__( self, tag, lines ):\n        self.tag    = string.lower( tag )\n        self.fields = []\n        cur_lines = []\n        field     = None\n        mode      = 0\n        for l in lines:\n            m = re_field.match( l )\n            if m:"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocMarkup:\n    def  __init__( self, tag, lines ):\n        self.tag    = string.lower( tag )\n        self.fields = []\n        cur_lines = []\n        field     = None\n        mode      = 0\n        for l in lines:\n            m = re_field.match( l )\n            if m:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocChapter:\n    def  __init__( self, block ):\n        self.block    = block\n        self.sections = []\n        if block:\n            self.name  = block.name\n            self.title = block.get_markup_words( \"title\" )\n            self.order = block.get_markup_words( \"sections\" )\n        else:\n            self.name  = \"Other\""
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocChapter:\n    def  __init__( self, block ):\n        self.block    = block\n        self.sections = []\n        if block:\n            self.name  = block.name\n            self.title = block.get_markup_words( \"title\" )\n            self.order = block.get_markup_words( \"sections\" )\n        else:\n            self.name  = \"Other\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocSection:\n    def  __init__( self, name = \"Other\" ):\n        self.name        = name\n        self.blocks      = {}\n        self.block_names = []  # ordered block names in section\n        self.defs        = []\n        self.abstract    = \"\"\n        self.description = \"\"\n        self.order       = []\n        self.title       = \"ERROR\""
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocSection:\n    def  __init__( self, name = \"Other\" ):\n        self.name        = name\n        self.blocks      = {}\n        self.block_names = []  # ordered block names in section\n        self.defs        = []\n        self.abstract    = \"\"\n        self.description = \"\"\n        self.order       = []\n        self.title       = \"ERROR\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  ContentProcessor:\n    def  __init__( self ):\n        \"\"\"Initialize a block content processor.\"\"\"\n        self.reset()\n        self.sections = {}    # dictionary of documentation sections\n        self.section  = None  # current documentation section\n        self.chapters = []    # list of chapters\n        self.headers  = {}    # dictionary of header macros\n    def  set_section( self, section_name ):\n        \"\"\"Set current section during parsing.\"\"\""
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  ContentProcessor:\n    def  __init__( self ):\n        \"\"\"Initialize a block content processor.\"\"\"\n        self.reset()\n        self.sections = {}    # dictionary of documentation sections\n        self.section  = None  # current documentation section\n        self.chapters = []    # list of chapters\n        self.headers  = {}    # dictionary of header macros\n    def  set_section( self, section_name ):\n        \"\"\"Set current section during parsing.\"\"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  DocBlock:\n    def  __init__( self, source, follow, processor ):\n        processor.reset()\n        self.source  = source\n        self.code    = []\n        self.type    = \"ERRTYPE\"\n        self.name    = \"ERRNAME\"\n        self.section = processor.section\n        self.markups = processor.process_content( source.content )\n        # compute block type from first markup tag"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "class  DocBlock:\n    def  __init__( self, source, follow, processor ):\n        processor.reset()\n        self.source  = source\n        self.code    = []\n        self.type    = \"ERRTYPE\"\n        self.name    = \"ERRNAME\"\n        self.section = processor.section\n        self.markups = processor.process_content( source.content )\n        # compute block type from first markup tag",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": "re_code_start",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "re_code_start = re.compile( r\"(\\s*){\\s*$\" )\nre_code_end   = re.compile( r\"(\\s*)}\\s*$\" )\n#\n# A regular expression to isolate identifiers from other text.  Two syntax\n# forms are supported:\n#\n#   <name>\n#   <name>[<id>]\n#\n# where both `<name>' and `<id>' consist of alphanumeric characters, `_',",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": "re_identifier",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "re_identifier = re.compile( r\"\"\"\n                              ((?:\\w|-)+\n                               (?:\\[(?:\\w|-)+\\])?)\n                            \"\"\", re.VERBOSE )\n#\n# We collect macro names ending in `_H' (group 1), as defined in\n# `freetype/config/ftheader.h'.  While outputting the object data, we use\n# this info together with the object's file location (group 2) to emit the\n# appropriate header file macro and its associated file name before the\n# object itself.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": "re_header_macro",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "re_header_macro = re.compile( r'^#define\\s{1,}(\\w{1,}_H)\\s{1,}<(.*)>' )\n################################################################\n##\n##  DOC CODE CLASS\n##\n##  The `DocCode' class is used to store source code lines.\n##\n##  `self.lines' contains a set of source code lines that will be dumped as\n##  HTML in a <PRE> tag.\n##",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": "re_field",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "peekOfCode": "re_field = re.compile( r\"\"\"\n                         \\s*\n                           (\n                             \\w*\n                           |\n                             \\w (\\w | \\.)* \\w\n                           )\n                         \\s* ::\n                       \"\"\", re.VERBOSE )\n################################################################",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.content",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  beautify_block( block ):\n    if block.content:\n        content_processor.reset()\n        markups = content_processor.process_content( block.content )\n        text    = []\n        first   = 1\n        for markup in markups:\n            text.extend( markup.beautify( first ) )\n            first = 0\n        # now beautify the documentation \"borders\" themselves"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "peekOfCode": "def  beautify_block( block ):\n    if block.content:\n        content_processor.reset()\n        markups = content_processor.process_content( block.content )\n        text    = []\n        first   = 1\n        for markup in markups:\n            text.extend( markup.beautify( first ) )\n            first = 0\n        # now beautify the documentation \"borders\" themselves",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  usage():\n    print( \"\\nDocBeauty 0.1 Usage information\\n\" )\n    print( \"  docbeauty [options] file1 [file2 ...]\\n\" )\n    print( \"using the following options:\\n\" )\n    print( \"  -h : print this page\" )\n    print( \"  -b : backup original files with the 'orig' extension\" )\n    print( \"\" )\n    print( \"  --backup : same as -b\" )\ndef  main( argv ):\n    \"\"\"main program loop\"\"\""
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "peekOfCode": "def  usage():\n    print( \"\\nDocBeauty 0.1 Usage information\\n\" )\n    print( \"  docbeauty [options] file1 [file2 ...]\\n\" )\n    print( \"using the following options:\\n\" )\n    print( \"  -h : print this page\" )\n    print( \"  -b : backup original files with the 'orig' extension\" )\n    print( \"\" )\n    print( \"  --backup : same as -b\" )\ndef  main( argv ):\n    \"\"\"main program loop\"\"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  main( argv ):\n    \"\"\"main program loop\"\"\"\n    global output_dir\n    try:\n        opts, args = getopt.getopt( sys.argv[1:], \\\n                                    \"hb\",         \\\n                                    [\"help\", \"backup\"] )\n    except getopt.GetoptError:\n        usage()\n        sys.exit( 2 )"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "peekOfCode": "def  main( argv ):\n    \"\"\"main program loop\"\"\"\n    global output_dir\n    try:\n        opts, args = getopt.getopt( sys.argv[1:], \\\n                                    \"hb\",         \\\n                                    [\"help\", \"backup\"] )\n    except getopt.GetoptError:\n        usage()\n        sys.exit( 2 )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "documentation": {}
    },
    {
        "label": "content_processor",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "peekOfCode": "content_processor = ContentProcessor()\ndef  beautify_block( block ):\n    if block.content:\n        content_processor.reset()\n        markups = content_processor.process_content( block.content )\n        text    = []\n        first   = 1\n        for markup in markups:\n            text.extend( markup.beautify( first ) )\n            first = 0",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docbeauty",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  usage():\n    print( \"\\nDocMaker Usage information\\n\" )\n    print( \"  docmaker [options] file1 [file2 ...]\\n\" )\n    print( \"using the following options:\\n\" )\n    print( \"  -h : print this page\" )\n    print( \"  -t : set project title, as in '-t \\\"My Project\\\"'\" )\n    print( \"  -o : set output directory, as in '-o mydir'\" )\n    print( \"  -p : set documentation prefix, as in '-p ft2'\" )\n    print( \"\" )\n    print( \"  --title  : same as -t, as in '--title=\\\"My Project\\\"'\" )"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "peekOfCode": "def  usage():\n    print( \"\\nDocMaker Usage information\\n\" )\n    print( \"  docmaker [options] file1 [file2 ...]\\n\" )\n    print( \"using the following options:\\n\" )\n    print( \"  -h : print this page\" )\n    print( \"  -t : set project title, as in '-t \\\"My Project\\\"'\" )\n    print( \"  -o : set output directory, as in '-o mydir'\" )\n    print( \"  -p : set documentation prefix, as in '-p ft2'\" )\n    print( \"\" )\n    print( \"  --title  : same as -t, as in '--title=\\\"My Project\\\"'\" )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  main( argv ):\n    \"\"\"Main program loop.\"\"\"\n    global output_dir\n    try:\n        opts, args = getopt.getopt( sys.argv[1:],\n                                    \"ht:o:p:\",\n                                    [\"help\", \"title=\", \"output=\", \"prefix=\"] )\n    except getopt.GetoptError:\n        usage()\n        sys.exit( 2 )"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "peekOfCode": "def  main( argv ):\n    \"\"\"Main program loop.\"\"\"\n    global output_dir\n    try:\n        opts, args = getopt.getopt( sys.argv[1:],\n                                    \"ht:o:p:\",\n                                    [\"help\", \"title=\", \"output=\", \"prefix=\"] )\n    except getopt.GetoptError:\n        usage()\n        sys.exit( 2 )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.docmaker",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  Formatter:\n    def  __init__( self, processor ):\n        self.processor   = processor\n        self.identifiers = {}\n        self.chapters    = processor.chapters\n        self.sections    = processor.sections.values()\n        self.block_index = []\n        # store all blocks in a dictionary\n        self.blocks = []\n        for section in self.sections:"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.formatter",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.formatter",
        "peekOfCode": "class  Formatter:\n    def  __init__( self, processor ):\n        self.processor   = processor\n        self.identifiers = {}\n        self.chapters    = processor.chapters\n        self.sections    = processor.sections.values()\n        self.block_index = []\n        # store all blocks in a dictionary\n        self.blocks = []\n        for section in self.sections:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.formatter",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  SourceBlockFormat:\n    def  __init__( self, id, start, column, end ):\n        \"\"\"Create a block pattern, used to recognize special documentation\n           blocks.\"\"\"\n        self.id     = id\n        self.start  = re.compile( start, re.VERBOSE )\n        self.column = re.compile( column, re.VERBOSE )\n        self.end    = re.compile( end, re.VERBOSE )\n#\n# Format 1 documentation comment blocks."
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "class  SourceBlockFormat:\n    def  __init__( self, id, start, column, end ):\n        \"\"\"Create a block pattern, used to recognize special documentation\n           blocks.\"\"\"\n        self.id     = id\n        self.start  = re.compile( start, re.VERBOSE )\n        self.column = re.compile( column, re.VERBOSE )\n        self.end    = re.compile( end, re.VERBOSE )\n#\n# Format 1 documentation comment blocks.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  SourceBlock:\n    def  __init__( self, processor, filename, lineno, lines ):\n        self.processor = processor\n        self.filename  = filename\n        self.lineno    = lineno\n        self.lines     = lines[:]\n        self.format    = processor.format\n        self.content   = []\n        if self.format == None:\n            return"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "class  SourceBlock:\n    def  __init__( self, processor, filename, lineno, lines ):\n        self.processor = processor\n        self.filename  = filename\n        self.lineno    = lineno\n        self.lines     = lines[:]\n        self.format    = processor.format\n        self.content   = []\n        if self.format == None:\n            return",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  SourceProcessor:\n    def  __init__( self ):\n        \"\"\"Initialize a source processor.\"\"\"\n        self.blocks   = []\n        self.filename = None\n        self.format   = None\n        self.lines    = []\n    def  reset( self ):\n        \"\"\"Reset a block processor and clean up all its blocks.\"\"\"\n        self.blocks = []"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "class  SourceProcessor:\n    def  __init__( self ):\n        \"\"\"Initialize a source processor.\"\"\"\n        self.blocks   = []\n        self.filename = None\n        self.format   = None\n        self.lines    = []\n    def  reset( self ):\n        \"\"\"Reset a block processor and clean up all its blocks.\"\"\"\n        self.blocks = []",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "start = r'''\n  \\s*      # any number of whitespace\n  /\\*{2,}/ # followed by '/' and at least two asterisks then '/'\n  \\s*$     # probably followed by whitespace\n'''\ncolumn = r'''\n  \\s*      # any number of whitespace\n  /\\*{1}   # followed by '/' and precisely one asterisk\n  ([^*].*) # followed by anything (group 1)\n  \\*{1}/   # followed by one asterisk and a '/'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "column",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "column = r'''\n  \\s*      # any number of whitespace\n  /\\*{1}   # followed by '/' and precisely one asterisk\n  ([^*].*) # followed by anything (group 1)\n  \\*{1}/   # followed by one asterisk and a '/'\n  \\s*$     # probably followed by whitespace\n'''\nre_source_block_format1 = SourceBlockFormat( 1, start, column, start )\n#\n# Format 2 documentation comment blocks.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_block_format1",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_block_format1 = SourceBlockFormat( 1, start, column, start )\n#\n# Format 2 documentation comment blocks.\n#\n#    /************************************ (at least 2 asterisks)\n#     *\n#     *                                    (1 asterisk)\n#     *\n#     */                                   (1 or more asterisks)\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "start = r'''\n  \\s*     # any number of whitespace\n  /\\*{2,} # followed by '/' and at least two asterisks\n  \\s*$    # probably followed by whitespace\n'''\ncolumn = r'''\n  \\s*           # any number of whitespace\n  \\*{1}(?![*/]) # followed by precisely one asterisk not followed by `/'\n  (.*)          # then anything (group1)\n'''",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "column",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "column = r'''\n  \\s*           # any number of whitespace\n  \\*{1}(?![*/]) # followed by precisely one asterisk not followed by `/'\n  (.*)          # then anything (group1)\n'''\nend = r'''\n  \\s*  # any number of whitespace\n  \\*+/ # followed by at least one asterisk, then '/'\n'''\nre_source_block_format2 = SourceBlockFormat( 2, start, column, end )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "end = r'''\n  \\s*  # any number of whitespace\n  \\*+/ # followed by at least one asterisk, then '/'\n'''\nre_source_block_format2 = SourceBlockFormat( 2, start, column, end )\n#\n# The list of supported documentation block formats.  We could add new ones\n# quite easily.\n#\nre_source_block_formats = [re_source_block_format1, re_source_block_format2]",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_block_format2",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_block_format2 = SourceBlockFormat( 2, start, column, end )\n#\n# The list of supported documentation block formats.  We could add new ones\n# quite easily.\n#\nre_source_block_formats = [re_source_block_format1, re_source_block_format2]\n#\n# The following regular expressions correspond to markup tags within the\n# documentation comment blocks.  They are equivalent despite their different\n# syntax.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_block_formats",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_block_formats = [re_source_block_format1, re_source_block_format2]\n#\n# The following regular expressions correspond to markup tags within the\n# documentation comment blocks.  They are equivalent despite their different\n# syntax.\n#\n# A markup tag consists of letters or character `-', to be found in group 1.\n#\n# Notice that a markup tag _must_ begin a new paragraph.\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_markup_tag1",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_markup_tag1 = re.compile( r'''\\s*<((?:\\w|-)*)>''' )  # <xxxx> format\nre_markup_tag2 = re.compile( r'''\\s*@((?:\\w|-)*):''' )  # @xxxx: format\n#\n# The list of supported markup tags.  We could add new ones quite easily.\n#\nre_markup_tags = [re_markup_tag1, re_markup_tag2]\n#\n# A regular expression to detect a cross reference, after markup tags have\n# been stripped off.\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_markup_tag2",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_markup_tag2 = re.compile( r'''\\s*@((?:\\w|-)*):''' )  # @xxxx: format\n#\n# The list of supported markup tags.  We could add new ones quite easily.\n#\nre_markup_tags = [re_markup_tag1, re_markup_tag2]\n#\n# A regular expression to detect a cross reference, after markup tags have\n# been stripped off.\n#\n# Two syntax forms are supported:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_markup_tags",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_markup_tags = [re_markup_tag1, re_markup_tag2]\n#\n# A regular expression to detect a cross reference, after markup tags have\n# been stripped off.\n#\n# Two syntax forms are supported:\n#\n#   @<name>\n#   @<name>[<id>]\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_crossref",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_crossref = re.compile( r\"\"\"\n                            @\n                            (?P<name>(?:\\w|-)+\n                                     (?:\\[(?:\\w|-)+\\])?)\n                            (?P<rest>.*)\n                          \"\"\", re.VERBOSE )\n#\n# Two regular expressions to detect italic and bold markup, respectively.\n# Group 1 is the markup, group 2 the rest of the line.\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_italic",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_italic = re.compile( r\"_((?:\\w|-)(?:\\w|'|-)*)_(.*)\" )     #  _italic_\nre_bold   = re.compile( r\"\\*((?:\\w|-)(?:\\w|'|-)*)\\*(.*)\" )   #  *bold*\n#\n# This regular expression code to identify an URL has been taken from\n#\n#   https://mail.python.org/pipermail/tutor/2002-September/017228.html\n#\n# (with slight modifications).\n#\nurls = r'(?:https?|telnet|gopher|file|wais|ftp)'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "urls",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "urls = r'(?:https?|telnet|gopher|file|wais|ftp)'\nltrs = r'\\w'\ngunk = r'/#~:.?+=&%@!\\-'\npunc = r'.:?\\-'\nany  = \"%(ltrs)s%(gunk)s%(punc)s\" % { 'ltrs' : ltrs,\n                                      'gunk' : gunk,\n                                      'punc' : punc }\nurl  = r\"\"\"\n         (\n           \\b                    # start at word boundary",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "ltrs",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "ltrs = r'\\w'\ngunk = r'/#~:.?+=&%@!\\-'\npunc = r'.:?\\-'\nany  = \"%(ltrs)s%(gunk)s%(punc)s\" % { 'ltrs' : ltrs,\n                                      'gunk' : gunk,\n                                      'punc' : punc }\nurl  = r\"\"\"\n         (\n           \\b                    # start at word boundary\n           %(urls)s :            # need resource and a colon",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "gunk",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "gunk = r'/#~:.?+=&%@!\\-'\npunc = r'.:?\\-'\nany  = \"%(ltrs)s%(gunk)s%(punc)s\" % { 'ltrs' : ltrs,\n                                      'gunk' : gunk,\n                                      'punc' : punc }\nurl  = r\"\"\"\n         (\n           \\b                    # start at word boundary\n           %(urls)s :            # need resource and a colon\n           [%(any)s] +?          # followed by one or more of any valid",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "punc",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "punc = r'.:?\\-'\nany  = \"%(ltrs)s%(gunk)s%(punc)s\" % { 'ltrs' : ltrs,\n                                      'gunk' : gunk,\n                                      'punc' : punc }\nurl  = r\"\"\"\n         (\n           \\b                    # start at word boundary\n           %(urls)s :            # need resource and a colon\n           [%(any)s] +?          # followed by one or more of any valid\n                                 # character, but be conservative and",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_url",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_url = re.compile( url, re.VERBOSE | re.MULTILINE )\n#\n# A regular expression that stops collection of comments for the current\n# block.\n#\nre_source_sep = re.compile( r'\\s*/\\*\\s*\\*/' )   #  /* */\n#\n# A regular expression to find possible C identifiers while outputting\n# source code verbatim, covering things like `*foo' or `(bar'.  Group 1 is\n# the prefix, group 2 the identifier -- since we scan lines from left to",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_sep",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_sep = re.compile( r'\\s*/\\*\\s*\\*/' )   #  /* */\n#\n# A regular expression to find possible C identifiers while outputting\n# source code verbatim, covering things like `*foo' or `(bar'.  Group 1 is\n# the prefix, group 2 the identifier -- since we scan lines from left to\n# right, sequentially splitting the source code into prefix and identifier\n# is fully sufficient for our purposes.\n#\nre_source_crossref = re.compile( r'(\\W*)(\\w*)' )\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_crossref",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_crossref = re.compile( r'(\\W*)(\\w*)' )\n#\n# A regular expression that matches a list of reserved C source keywords.\n#\nre_source_keywords = re.compile( '''\\\\b ( typedef   |\n                                          struct    |\n                                          enum      |\n                                          union     |\n                                          const     |\n                                          char      |",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": "re_source_keywords",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "peekOfCode": "re_source_keywords = re.compile( '''\\\\b ( typedef   |\n                                          struct    |\n                                          enum      |\n                                          union     |\n                                          const     |\n                                          char      |\n                                          int       |\n                                          short     |\n                                          long      |\n                                          void      |",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.sources",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class  HtmlFormatter( Formatter ):\n    def  __init__( self, processor, project_title, file_prefix ):\n        Formatter.__init__( self, processor )\n        global html_header_1\n        global html_header_2\n        global html_header_3l, html_header_3r\n        global html_header_4\n        global html_header_5t, html_header_5i\n        global html_header_6\n        global html_footer"
        },
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "class  HtmlFormatter( Formatter ):\n    def  __init__( self, processor, project_title, file_prefix ):\n        Formatter.__init__( self, processor )\n        global html_header_1\n        global html_header_2\n        global html_header_3l, html_header_3r\n        global html_header_4\n        global html_header_5t, html_header_5i\n        global html_header_6\n        global html_footer",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )\n    result = string.replace( result, \">\", \"&gt;\"  )\n    return result\n################################################################\n##\n##  HTML FORMATTER CLASS\n##\nclass  HtmlFormatter( Formatter ):"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "def  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )\n    result = string.replace( result, \">\", \"&gt;\"  )\n    return result\n################################################################\n##\n##  HTML FORMATTER CLASS\n##\nclass  HtmlFormatter( Formatter ):",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_1",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_1 = \"\"\"\\\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n\"https://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<title>\\\n\"\"\"\nhtml_header_2 = \"\"\"\\\n API Reference</title>",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_2",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_2 = \"\"\"\\\n API Reference</title>\n<style type=\"text/css\">\n  a:link { color: #0000EF; }\n  a:visited { color: #51188E; }\n  a:hover { color: #FF0000; }\n  body { font-family: Verdana, Geneva, Arial, Helvetica, serif;\n         color: #000000;\n         background: #FFFFFF;\n         width: 87%;",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_3l",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_3l = \"\"\"\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"\nhtml_header_3r = \"\"\"\n<table class=\"index-toc-link\"><tr><td class=\"right\">[<a href=\"\\\n\"\"\"\nhtml_header_4 = \"\"\"\\\n\">Index</a>]</td><td class=\"right\">[<a href=\"\\\n\"\"\"\nhtml_header_5t = \"\"\"\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_3r",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_3r = \"\"\"\n<table class=\"index-toc-link\"><tr><td class=\"right\">[<a href=\"\\\n\"\"\"\nhtml_header_4 = \"\"\"\\\n\">Index</a>]</td><td class=\"right\">[<a href=\"\\\n\"\"\"\nhtml_header_5t = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n<h1>\\\n\"\"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_4",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_4 = \"\"\"\\\n\">Index</a>]</td><td class=\"right\">[<a href=\"\\\n\"\"\"\nhtml_header_5t = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n<h1>\\\n\"\"\"\nhtml_header_5i = \"\"\"\\\n\">Index</a>]</td></tr></table>\n<h1>\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_5t",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_5t = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n<h1>\\\n\"\"\"\nhtml_header_5i = \"\"\"\\\n\">Index</a>]</td></tr></table>\n<h1>\\\n\"\"\"\nhtml_header_6 = \"\"\"\\\n API Reference</h1>",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_5i",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_5i = \"\"\"\\\n\">Index</a>]</td></tr></table>\n<h1>\\\n\"\"\"\nhtml_header_6 = \"\"\"\\\n API Reference</h1>\n\"\"\"\n# The HTML footer used by all generated pages.\nhtml_footer = \"\"\"\\\n</body>",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_header_6",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_header_6 = \"\"\"\\\n API Reference</h1>\n\"\"\"\n# The HTML footer used by all generated pages.\nhtml_footer = \"\"\"\\\n</body>\n</html>\\\n\"\"\"\n# The header and footer used for each section.\nsection_title_header1 = '<h1 id=\"'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "html_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "html_footer = \"\"\"\\\n</body>\n</html>\\\n\"\"\"\n# The header and footer used for each section.\nsection_title_header1 = '<h1 id=\"'\nsection_title_header2 = '\">'\nsection_title_footer = \"</h1>\"\n# The header and footer used for code segments.\ncode_header = '<pre class=\"colored\">'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "section_title_header1",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "section_title_header1 = '<h1 id=\"'\nsection_title_header2 = '\">'\nsection_title_footer = \"</h1>\"\n# The header and footer used for code segments.\ncode_header = '<pre class=\"colored\">'\ncode_footer = '</pre>'\n# Paragraph header and footer.\npara_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "section_title_header2",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "section_title_header2 = '\">'\nsection_title_footer = \"</h1>\"\n# The header and footer used for code segments.\ncode_header = '<pre class=\"colored\">'\ncode_footer = '</pre>'\n# Paragraph header and footer.\npara_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "section_title_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "section_title_footer = \"</h1>\"\n# The header and footer used for code segments.\ncode_header = '<pre class=\"colored\">'\ncode_footer = '</pre>'\n# Paragraph header and footer.\npara_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'\nblock_footer_start  = \"\"\"\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "code_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "code_header = '<pre class=\"colored\">'\ncode_footer = '</pre>'\n# Paragraph header and footer.\npara_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'\nblock_footer_start  = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "code_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "code_footer = '</pre>'\n# Paragraph header and footer.\npara_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'\nblock_footer_start  = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "para_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "para_header = \"<p>\"\npara_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'\nblock_footer_start  = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"\nblock_footer_middle = \"\"\"\\\n\">Index</a>]</td>\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "para_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "para_footer = \"</p>\"\n# Block header and footer.\nblock_header        = '<div class=\"section\">'\nblock_footer_start  = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"\nblock_footer_middle = \"\"\"\\\n\">Index</a>]</td>\\\n<td class=\"middle\">[<a href=\"#\">Top</a>]</td>\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "block_footer_middle",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "block_footer_middle = \"\"\"\\\n\">Index</a>]</td>\\\n<td class=\"middle\">[<a href=\"#\">Top</a>]</td>\\\n<td class=\"right\">[<a href=\"\\\n\"\"\"\nblock_footer_end    = \"\"\"\\\n\">TOC</a>]</td></tr></table></div>\n\"\"\"\n# Description header/footer.\ndescription_header = \"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "description_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "description_header = \"\"\ndescription_footer = \"\"\n# Marker header/inter/footer combination.\nmarker_header = \"<h4>\"\nmarker_inter  = \"</h4>\"\nmarker_footer = \"\"\n# Header location header/footer.\nheader_location_header = \"<p>\"\nheader_location_footer = \"</p>\"\n# Source code extracts header/footer.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "description_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "description_footer = \"\"\n# Marker header/inter/footer combination.\nmarker_header = \"<h4>\"\nmarker_inter  = \"</h4>\"\nmarker_footer = \"\"\n# Header location header/footer.\nheader_location_header = \"<p>\"\nheader_location_footer = \"</p>\"\n# Source code extracts header/footer.\nsource_header = \"<pre>\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "marker_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "marker_header = \"<h4>\"\nmarker_inter  = \"</h4>\"\nmarker_footer = \"\"\n# Header location header/footer.\nheader_location_header = \"<p>\"\nheader_location_footer = \"</p>\"\n# Source code extracts header/footer.\nsource_header = \"<pre>\"\nsource_footer = \"</pre>\"\n# Chapter header/inter/footer.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "marker_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "marker_footer = \"\"\n# Header location header/footer.\nheader_location_header = \"<p>\"\nheader_location_footer = \"</p>\"\n# Source code extracts header/footer.\nsource_header = \"<pre>\"\nsource_footer = \"</pre>\"\n# Chapter header/inter/footer.\nchapter_header = \"\"\"\\\n<div class=\"section\">",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "header_location_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "header_location_header = \"<p>\"\nheader_location_footer = \"</p>\"\n# Source code extracts header/footer.\nsource_header = \"<pre>\"\nsource_footer = \"</pre>\"\n# Chapter header/inter/footer.\nchapter_header = \"\"\"\\\n<div class=\"section\">\n<h2>\\\n\"\"\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "header_location_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "header_location_footer = \"</p>\"\n# Source code extracts header/footer.\nsource_header = \"<pre>\"\nsource_footer = \"</pre>\"\n# Chapter header/inter/footer.\nchapter_header = \"\"\"\\\n<div class=\"section\">\n<h2>\\\n\"\"\"\nchapter_inter  = '</h2>'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "source_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "source_header = \"<pre>\"\nsource_footer = \"</pre>\"\n# Chapter header/inter/footer.\nchapter_header = \"\"\"\\\n<div class=\"section\">\n<h2>\\\n\"\"\"\nchapter_inter  = '</h2>'\nchapter_footer = '</div>'\n# Index footer.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "source_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "source_footer = \"</pre>\"\n# Chapter header/inter/footer.\nchapter_header = \"\"\"\\\n<div class=\"section\">\n<h2>\\\n\"\"\"\nchapter_inter  = '</h2>'\nchapter_footer = '</div>'\n# Index footer.\nindex_footer_start = \"\"\"\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "chapter_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "chapter_header = \"\"\"\\\n<div class=\"section\">\n<h2>\\\n\"\"\"\nchapter_inter  = '</h2>'\nchapter_footer = '</div>'\n# Index footer.\nindex_footer_start = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"right\">[<a href=\"\\",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "chapter_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "chapter_footer = '</div>'\n# Index footer.\nindex_footer_start = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"right\">[<a href=\"\\\n\"\"\"\nindex_footer_end = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n\"\"\"\n# TOC footer.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "index_footer_start",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "index_footer_start = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"right\">[<a href=\"\\\n\"\"\"\nindex_footer_end = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n\"\"\"\n# TOC footer.\ntoc_footer_start = \"\"\"\\\n<hr>",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "index_footer_end",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "index_footer_end = \"\"\"\\\n\">TOC</a>]</td></tr></table>\n\"\"\"\n# TOC footer.\ntoc_footer_start = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"\ntoc_footer_end = \"\"\"\\\n\">Index</a>]</td></tr></table>",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "toc_footer_start",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "toc_footer_start = \"\"\"\\\n<hr>\n<table class=\"index-toc-link\"><tr><td class=\"left\">[<a href=\"\\\n\"\"\"\ntoc_footer_end = \"\"\"\\\n\">Index</a>]</td></tr></table>\n\"\"\"\n# Source language keyword coloration and styling.\nkeyword_prefix = '<span class=\"keyword\">'\nkeyword_suffix = '</span>'",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "toc_footer_end",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "toc_footer_end = \"\"\"\\\n\">Index</a>]</td></tr></table>\n\"\"\"\n# Source language keyword coloration and styling.\nkeyword_prefix = '<span class=\"keyword\">'\nkeyword_suffix = '</span>'\nsection_synopsis_header = '<h2>Synopsis</h2>'\nsection_synopsis_footer = ''\n# Translate a single line of source to HTML.  This converts `<', `>', and\n# `&' into `&lt;',`&gt;', and `&amp;'.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "keyword_prefix",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "keyword_prefix = '<span class=\"keyword\">'\nkeyword_suffix = '</span>'\nsection_synopsis_header = '<h2>Synopsis</h2>'\nsection_synopsis_footer = ''\n# Translate a single line of source to HTML.  This converts `<', `>', and\n# `&' into `&lt;',`&gt;', and `&amp;'.\n#\ndef  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "keyword_suffix",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "keyword_suffix = '</span>'\nsection_synopsis_header = '<h2>Synopsis</h2>'\nsection_synopsis_footer = ''\n# Translate a single line of source to HTML.  This converts `<', `>', and\n# `&' into `&lt;',`&gt;', and `&amp;'.\n#\ndef  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )\n    result = string.replace( result, \">\", \"&gt;\"  )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "section_synopsis_header",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "section_synopsis_header = '<h2>Synopsis</h2>'\nsection_synopsis_footer = ''\n# Translate a single line of source to HTML.  This converts `<', `>', and\n# `&' into `&lt;',`&gt;', and `&amp;'.\n#\ndef  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )\n    result = string.replace( result, \">\", \"&gt;\"  )\n    return result",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": "section_synopsis_footer",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "peekOfCode": "section_synopsis_footer = ''\n# Translate a single line of source to HTML.  This converts `<', `>', and\n# `&' into `&lt;',`&gt;', and `&amp;'.\n#\ndef  html_quote( line ):\n    result = string.replace( line,   \"&\", \"&amp;\" )\n    result = string.replace( result, \"<\", \"&lt;\"  )\n    result = string.replace( result, \">\", \"&gt;\"  )\n    return result\n################################################################",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.tohtml",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  index_key( s ):\n    return string.join( itertools.chain( *zip( s.lower(), s ) ) )\n# Sort `input_list', placing the elements of `order_list' in front.\n#\ndef  sort_order_list( input_list, order_list ):\n    new_list = order_list[:]\n    for id in input_list:\n        if not id in order_list:\n            new_list.append( id )\n    return new_list"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  index_key( s ):\n    return string.join( itertools.chain( *zip( s.lower(), s ) ) )\n# Sort `input_list', placing the elements of `order_list' in front.\n#\ndef  sort_order_list( input_list, order_list ):\n    new_list = order_list[:]\n    for id in input_list:\n        if not id in order_list:\n            new_list.append( id )\n    return new_list",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  sort_order_list( input_list, order_list ):\n    new_list = order_list[:]\n    for id in input_list:\n        if not id in order_list:\n            new_list.append( id )\n    return new_list\n# Divert standard output to a given project documentation file.  Use\n# `output_dir' to determine the filename location if necessary and save the\n# old stdout handle in a tuple that is returned by this function.\n#"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  sort_order_list( input_list, order_list ):\n    new_list = order_list[:]\n    for id in input_list:\n        if not id in order_list:\n            new_list.append( id )\n    return new_list\n# Divert standard output to a given project documentation file.  Use\n# `output_dir' to determine the filename location if necessary and save the\n# old stdout handle in a tuple that is returned by this function.\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  open_output( filename ):\n    global output_dir\n    if output_dir and output_dir != \"\":\n        filename = output_dir + os.sep + filename\n    old_stdout = sys.stdout\n    new_file   = open( filename, \"w\" )\n    sys.stdout = new_file\n    return ( new_file, old_stdout )\n# Close the output that was returned by `open_output'.\n#"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  open_output( filename ):\n    global output_dir\n    if output_dir and output_dir != \"\":\n        filename = output_dir + os.sep + filename\n    old_stdout = sys.stdout\n    new_file   = open( filename, \"w\" )\n    sys.stdout = new_file\n    return ( new_file, old_stdout )\n# Close the output that was returned by `open_output'.\n#",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  close_output( output ):\n    output[0].close()\n    sys.stdout = output[1]\n# Check output directory.\n#\ndef  check_output():\n    global output_dir\n    if output_dir:\n        if output_dir != \"\":\n            if not os.path.isdir( output_dir ):"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  close_output( output ):\n    output[0].close()\n    sys.stdout = output[1]\n# Check output directory.\n#\ndef  check_output():\n    global output_dir\n    if output_dir:\n        if output_dir != \"\":\n            if not os.path.isdir( output_dir ):",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  check_output():\n    global output_dir\n    if output_dir:\n        if output_dir != \"\":\n            if not os.path.isdir( output_dir ):\n                sys.stderr.write( \"argument\"\n                                  + \" '\" + output_dir + \"' \"\n                                  + \"is not a valid directory\\n\" )\n                sys.exit( 2 )\n        else:"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  check_output():\n    global output_dir\n    if output_dir:\n        if output_dir != \"\":\n            if not os.path.isdir( output_dir ):\n                sys.stderr.write( \"argument\"\n                                  + \" '\" + output_dir + \"' \"\n                                  + \"is not a valid directory\\n\" )\n                sys.exit( 2 )\n        else:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  file_exists( pathname ):\n    \"\"\"Check that a given file exists.\"\"\"\n    result = 1\n    try:\n        file = open( pathname, \"r\" )\n        file.close()\n    except:\n        result = None\n        sys.stderr.write( pathname + \" couldn't be accessed\\n\" )\n    return result"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  file_exists( pathname ):\n    \"\"\"Check that a given file exists.\"\"\"\n    result = 1\n    try:\n        file = open( pathname, \"r\" )\n        file.close()\n    except:\n        result = None\n        sys.stderr.write( pathname + \" couldn't be accessed\\n\" )\n    return result",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 2,
            "peekOfCode": "def  make_file_list( args = None ):\n    \"\"\"Build a list of input files from command-line arguments.\"\"\"\n    file_list = []\n    # sys.stderr.write( repr( sys.argv[1 :] ) + '\\n' )\n    if not args:\n        args = sys.argv[1:]\n    for pathname in args:\n        if string.find( pathname, '*' ) >= 0:\n            newpath = glob.glob( pathname )\n            newpath.sort()  # sort files -- this is important because"
        },
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "def  make_file_list( args = None ):\n    \"\"\"Build a list of input files from command-line arguments.\"\"\"\n    file_list = []\n    # sys.stderr.write( repr( sys.argv[1 :] ) + '\\n' )\n    if not args:\n        args = sys.argv[1:]\n    for pathname in args:\n        if string.find( pathname, '*' ) >= 0:\n            newpath = glob.glob( pathname )\n            newpath.sort()  # sort files -- this is important because",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": "output_dir",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "peekOfCode": "output_dir = None\n# A function that generates a sorting key.  We want lexicographical order\n# (primary key) except that capital letters are sorted before lowercase\n# ones (secondary key).\n#\n# The primary key is implemented by lowercasing the input.  The secondary\n# key is simply the original data appended, character by character.  For\n# example, the sort key for `FT_x' is `fFtT__xx', while the sort key for\n# `ft_X' is `fftt__xX'.  Since ASCII codes of uppercase letters are\n# numerically smaller than the codes of lowercase letters, `fFtT__xx' gets",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.docmaker.utils",
        "documentation": {}
    },
    {
        "label": "KNOWN_COMPONENT",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "KNOWN_COMPONENT = {}\nSRC_FILE_DIRS   = [ \"src\" ]\nTRACE_DEF_FILES = [ \"include/freetype/internal/fttrace.h\" ]\n# --------------------------------------------------------------\n# Parse command line options\n#\nfor i in range( 1, len( sys.argv ) ):\n  if sys.argv[i].startswith( \"--help\" ):\n    print \"Usage: %s [option]\" % sys.argv[0]\n    print \"Search used-but-defined and defined-but-not-used trace_XXX macros\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "TRACE_DEF_FILES",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "TRACE_DEF_FILES = [ \"include/freetype/internal/fttrace.h\" ]\n# --------------------------------------------------------------\n# Parse command line options\n#\nfor i in range( 1, len( sys.argv ) ):\n  if sys.argv[i].startswith( \"--help\" ):\n    print \"Usage: %s [option]\" % sys.argv[0]\n    print \"Search used-but-defined and defined-but-not-used trace_XXX macros\"\n    print \"\"\n    print \"  --help:\"",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "c_pathname_pat",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "c_pathname_pat = re.compile( '^.*\\.[ch]$', re.IGNORECASE )\ntrace_use_pat  = re.compile( '^[ \\t]*#define[ \\t]+FT_COMPONENT[ \\t]+trace_' )\nfor d in SRC_FILE_DIRS:\n  for ( p, dlst, flst ) in os.walk( d ):\n    for f in flst:\n      if c_pathname_pat.match( f ) != None:\n        src_pathname = os.path.join( p, f )\n        line_num = 0\n        for src_line in open( src_pathname, 'r' ):\n          line_num = line_num + 1",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "trace_def_pat_opn",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "trace_def_pat_opn = re.compile( '^.*FT_TRACE_DEF[ \\t]*\\([ \\t]*' )\ntrace_def_pat_cls = re.compile( '[ \\t\\)].*$' )\nfor f in TRACE_DEF_FILES:\n  line_num = 0\n  for hdr_line in open( f, 'r' ):\n    line_num = line_num + 1\n    hdr_line = hdr_line.strip()\n    if trace_def_pat_opn.match( hdr_line ) != None:\n      component_name = trace_def_pat_opn.sub( '', hdr_line )\n      component_name = trace_def_pat_cls.sub( '', component_name )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "trace_def_pat_cls",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "trace_def_pat_cls = re.compile( '[ \\t\\)].*$' )\nfor f in TRACE_DEF_FILES:\n  line_num = 0\n  for hdr_line in open( f, 'r' ):\n    line_num = line_num + 1\n    hdr_line = hdr_line.strip()\n    if trace_def_pat_opn.match( hdr_line ) != None:\n      component_name = trace_def_pat_opn.sub( '', hdr_line )\n      component_name = trace_def_pat_cls.sub( '', component_name )\n      if component_name in KNOWN_COMPONENT:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "cmpnt",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "cmpnt = USED_COMPONENT.keys()\ncmpnt.sort()\nfor c in cmpnt:\n  if c not in KNOWN_COMPONENT:\n    print \"Trace component %s (used in %s) is not defined.\" % ( c, \", \".join( USED_COMPONENT[c] ) )\nprint \"# Trace component is defined but not used in the implementations.\"\ncmpnt = KNOWN_COMPONENT.keys()\ncmpnt.sort()\nfor c in cmpnt:\n  if c not in USED_COMPONENT:",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "cmpnt",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "peekOfCode": "cmpnt = KNOWN_COMPONENT.keys()\ncmpnt.sort()\nfor c in cmpnt:\n  if c not in USED_COMPONENT:\n    if c != \"any\":\n      print \"Trace component %s (defined in %s) is not used.\" % ( c, KNOWN_COMPONENT[c] )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.chktrcmp",
        "documentation": {}
    },
    {
        "label": "shrink",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.cordic",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.cordic",
        "peekOfCode": "shrink = 1.0\ncomma  = \"\"\nprint \"\"\nprint \"table of arctan( 1/2^n ) for PI = \" + repr(units/65536.0) + \" units\"\nfor n in range(1,32):\n    x = 0.5**n                      # tangent value\n    angle  = math.atan(x)           # arctangent\n    angle2 = round(angle*scale)     # arctangent in FT_Angle units\n    if angle2 <= 0:\n        break",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.cordic",
        "documentation": {}
    },
    {
        "label": "StringTable",
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "class StringTable:\n  def __init__( self, name_list, master_table_name ):\n    self.names        = name_list\n    self.master_table = master_table_name\n    self.indices      = {}\n    index             = 0\n    for name in name_list:\n      self.indices[name] = index\n      index += len( name ) + 1\n    self.total = index",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "StringNode",
        "kind": 6,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "class StringNode:\n  def __init__( self, letter, value ):\n    self.letter   = letter\n    self.value    = value\n    self.children = {}\n  def __cmp__( self, other ):\n    return ord( self.letter[0] ) - ord( other.letter[0] )\n  def add( self, word, value ):\n    if len( word ) == 0:\n      self.value = value",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "adobe_glyph_values",
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "def adobe_glyph_values():\n  \"\"\"return the list of glyph names and their unicode values\"\"\"\n  lines  = string.split( adobe_glyph_list, '\\n' )\n  glyphs = []\n  values = []\n  for line in lines:\n    if line:\n      fields = string.split( line, ';' )\n#     print fields[1] + ' - ' + fields[0]\n      subfields = string.split( fields[1], ' ' )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "filter_glyph_names",
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "def filter_glyph_names( alist, filter ):\n  \"\"\"filter `alist' by taking _out_ all glyph names that are in `filter'\"\"\"\n  count  = 0\n  extras = []\n  for name in alist:\n    try:\n      filtered_index = filter.index( name )\n    except:\n      extras.append( name )\n  return extras",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "dump_encoding",
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "def dump_encoding( file, encoding_name, encoding_list ):\n  \"\"\"dump a given encoding\"\"\"\n  write = file.write\n  write( \"  /* the following are indices into the SID name table */\\n\" )\n  write( \"#ifndef  DEFINE_PS_TABLES_DATA\\n\" )\n  write( \"#ifdef  __cplusplus\\n\" )\n  write( '  extern \"C\"\\n' )\n  write( \"#else\\n\" )\n  write( \"  extern\\n\" )\n  write( \"#endif\\n\" )",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "dump_array",
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "def dump_array( the_array, write, array_name ):\n  \"\"\"dumps a given encoding\"\"\"\n  write( \"#ifndef  DEFINE_PS_TABLES_DATA\\n\" )\n  write( \"#ifdef  __cplusplus\\n\" )\n  write( '  extern \"C\"\\n' )\n  write( \"#else\\n\" )\n  write( \"  extern\\n\" )\n  write( \"#endif\\n\" )\n  write( \"#endif\\n\" )\n  write( \"  const unsigned char  \" + array_name +",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "def main():\n  \"\"\"main program body\"\"\"\n  if len( sys.argv ) != 2:\n    print __doc__ % sys.argv[0]\n    sys.exit( 1 )\n  file  = open( sys.argv[1], \"wb\" )\n  write = file.write\n  count_sid = len( sid_standard_names )\n  # `mac_extras' contains the list of glyph names in the Macintosh standard\n  # encoding which are not in the SID Standard Names.",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "mac_standard_names",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "mac_standard_names = \\\n[\n  # 0\n  \".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\",\n  \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\",\n  # 10\n  \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\",\n  \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\",\n  # 20\n  \"one\", \"two\", \"three\", \"four\", \"five\",",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "sid_standard_names",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "sid_standard_names = \\\n[\n  # 0\n  \".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\",\n  \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\",\n  # 10\n  \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\",\n  \"period\", \"slash\", \"zero\", \"one\", \"two\",\n  # 20\n  \"three\", \"four\", \"five\", \"six\", \"seven\",",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "t1_standard_encoding",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "t1_standard_encoding = \\\n[\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   1,   2,   3,   4,   5,   6,   7,   8,\n    9,  10,  11,  12,  13,  14,  15,  16,  17,  18,\n   19,  20,  21,  22,  23,  24,  25,  26,  27,  28,\n   29,  30,  31,  32,  33,  34,  35,  36,  37,  38,\n   39,  40,  41,  42,  43,  44,  45,  46,  47,  48,",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "t1_expert_encoding",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "t1_expert_encoding = \\\n[\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,\n    0,   0,   1, 229, 230,   0, 231, 232, 233, 234,\n  235, 236, 237, 238,  13,  14,  15,  99, 239, 240,\n  241, 242, 243, 244, 245, 246, 247, 248,  27,  28,\n  249, 250, 251, 252,   0, 253, 254, 255, 256, 257,\n    0,   0,   0, 258,   0,   0, 259, 260, 261, 262,",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    },
    {
        "label": "adobe_glyph_list",
        "kind": 5,
        "importPath": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "description": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "peekOfCode": "adobe_glyph_list = \"\"\"\\\nA;0041\nAE;00C6\nAEacute;01FC\nAEmacron;01E2\nAEsmall;F7E6\nAacute;00C1\nAacutesmall;F7E1\nAbreve;0102\nAbreveacute;1EAE",
        "detail": "SDL2_ttf-2.0.15.external.freetype-2.9.1.src.tools.glnames",
        "documentation": {}
    }
]